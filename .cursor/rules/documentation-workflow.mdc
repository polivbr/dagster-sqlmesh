# Documentation Workflow and Deployment Guide

This rule explains how to update, build, and deploy documentation for the dg-sqlmesh project.

## üìö Documentation Structure

The documentation is built using **MkDocs** with the **Material theme** and is located in the `docs/` directory:

- `docs/index.md` - Homepage with project overview
- `docs/getting-started/` - Installation and setup guides
- `docs/user-guide/` - Core concepts and architecture
- `docs/examples/` - Code examples and usage patterns
- `docs/development/` - Contributing guidelines

## üöÄ Local Development

### Start Development Server
```bash
make docs-serve
```
This starts MkDocs on `http://localhost:8000` with live reload.

### Build Documentation Locally
```bash
make docs-build
```
Builds the documentation site in the `site/` directory.

### Clean Build Artifacts
```bash
make docs-clean
```
Removes the `site/` directory and build artifacts.

### Full Documentation Workflow
```bash
make docs
```
Runs: clean ‚Üí build ‚Üí validation check

## üîß Makefile Commands

The [Makefile](mdc:Makefile) provides several documentation-related commands:

- **`docs-serve`** - Start development server on localhost:8000
- **`docs-build`** - Build documentation site
- **`docs-clean`** - Clean build artifacts
- **`docs-deploy`** - Prepare for deployment (clean + build)
- **`docs-quality`** - Check documentation quality and links
- **`docs`** - Complete workflow (clean + build + check)

## üåê GitHub Pages Deployment

### Automatic Deployment
Documentation is automatically deployed to GitHub Pages via the [GitHub Actions workflow](mdc:.github/workflows/docs.yml).

**Triggers:**
- Push to `main` branch
- Changes to `docs/**`, `mkdocs.yml`, or `.github/workflows/docs.yml`
- Manual workflow dispatch

**Deployment URL:** `https://fosk06.github.io/dagster-sqlmesh/`

### Workflow Steps
1. **Build** - Installs dependencies and builds MkDocs site
2. **Setup Pages** - Configures GitHub Pages with `enablement: true`
3. **Upload** - Uploads built site as artifact
4. **Deploy** - Deploys to GitHub Pages (only on `main` branch)

## üìù Updating Documentation

### 1. Make Changes
Edit files in the `docs/` directory or `mkdocs.yml`

### 2. Test Locally
```bash
make docs-serve  # View changes in browser
make docs-build  # Verify build works
```

### 3. Commit and Push
```bash
git add docs/ mkdocs.yml
git commit -m "docs: update [description of changes]"
git push origin main
```

### 4. Automatic Deployment
The GitHub Actions workflow will automatically:
- Build the documentation
- Deploy to GitHub Pages
- Update the live site

## ‚ö†Ô∏è Important Notes

- **No manual deployment needed** - GitHub Actions handles everything
- **Only deploys from `main`** - PRs only build, don't deploy
- **Live reload** - Use `make docs-serve` for development
- **Build validation** - Use `make docs-quality` to check for issues

## üêõ Troubleshooting

### Build Fails
```bash
make docs-clean  # Clean artifacts
make docs-build  # Try building again
```

### Development Server Issues
```bash
# Kill any existing processes
pkill -f mkdocs
# Start fresh
make docs-serve
```

### GitHub Pages Not Updating
- Check GitHub Actions workflow status
- Verify changes are on `main` branch
- Wait a few minutes for deployment to complete

## üìã Best Practices

1. **Always test locally** with `make docs-serve` before pushing
2. **Use descriptive commit messages** starting with `docs:`
3. **Keep documentation in sync** with code changes
4. **Validate builds** with `make docs-quality`
5. **Check deployment** after pushing to `main`

## üîó Related Files

- [mkdocs.yml](mdc:mkdocs.yml) - MkDocs configuration
- [.github/workflows/docs.yml](mdc:.github/workflows/docs.yml) - Deployment workflow
- [Makefile](mdc:Makefile) - Build commands
- [docs/](mdc:docs/) - Documentation source files
