---
description: Test Commands for dg-sqlmesh
alwaysApply: false
---

# Test Commands for dg-sqlmesh

## Make Commands

Always use the [Makefile](mdc:Makefile) for testing tasks:

```bash
# Basic testing
make test                    # Run all tests
make coverage                # Run tests with coverage report

# Code quality (pre-test)
make lint                    # Lint and format code
make ruff                    # Lint code with ruff
make format                  # Format code with ruff
make vulture                 # Detect dead code

# Full validation
make validate                # Full validation (clean + build + test + ruff + vulture)
make pre-commit              # Pre-commit checks (lint + test + vulture + security)
```

## Manual Test Commands

### Running Tests with uv

```bash
# Run all tests
uv run --group dev pytest tests/ -v

# Run specific test categories
uv run --group dev pytest tests/unit/ -v
uv run --group dev pytest tests/integration/ -v

# Run tests with coverage
uv run --group dev coverage run -m pytest tests/ -v
uv run --group dev coverage report --show-missing
uv run --group dev coverage html

# Run specific test files
uv run --group dev pytest tests/unit/test_factory.py -v
uv run --group dev pytest tests/integration/test_asset_execution.py -v
```

### SQLMesh Integration Testing

```bash
# Test SQLMesh project setup (if test project exists)
uv run --group dev sqlmesh -p tests/sqlmesh_project plan --no-prompts

# Test SQLMesh execution (if test project exists)
uv run --group dev sqlmesh -p tests/sqlmesh_project run --no-prompts

# Test SQLMesh with specific models (if test project exists)
uv run --group dev sqlmesh -p tests/sqlmesh_project run --models stg_customers,stg_orders --no-prompts
```

### Dagster Integration Testing

```bash
# Test Dagster definitions creation
uv run --group dev python -c "
from dg_sqlmesh import sqlmesh_definitions_factory
defs = sqlmesh_definitions_factory(project_dir='tests/sqlmesh_project', gateway='duckdb')
print(f'Created {len(defs.assets)} assets')
print(f'Created {len(defs.resources)} resources')
print(f'Created {len(defs.jobs)} jobs')
"

# Test individual asset creation
uv run --group dev python -c "
from dg_sqlmesh import sqlmesh_assets_factory, SQLMeshResource
resource = SQLMeshResource(project_dir='tests/sqlmesh_project', gateway='duckdb')
assets = sqlmesh_assets_factory(sqlmesh_resource=resource)
print(f'Created {len(assets)} individual assets')
for asset in assets:
    print(f'- {asset.key}')
"
```

## Test Data Management

### Load Test Data

```bash
# Load Jaffle Shop data (if test data exists)
uv run --group dev python tests/load_jaffle_data.py

# Generate test data (if needed)
uv run --group dev python tests/generate_test_data.py

# Verify data loading (if test database exists)
uv run --group dev python -c "
import duckdb
conn = duckdb.connect('tests/sqlmesh_project/jaffle_test.db')
print('Customers:', conn.execute('SELECT COUNT(*) FROM main.raw_source_customers').fetchone()[0])
print('Orders:', conn.execute('SELECT COUNT(*) FROM main.raw_source_orders').fetchone()[0])
print('Items:', conn.execute('SELECT COUNT(*) FROM main.raw_source_items').fetchone()[0])
"
```

## Test Configuration

### pytest.ini

The project uses [pytest.ini](mdc:pytest.ini) for test configuration:

```ini
[tool:pytest]
addopts = 
    -W ignore::DeprecationWarning
    -W ignore::pydantic.warnings.PydanticDeprecatedSince20
    -W ignore::UserWarning
    --disable-warnings
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    core: mark test as core functionality test
    unit: mark test as unit test
    integration: mark test as integration test
```

### Test Structure

Tests are organized in the [tests/](mdc:tests/) directory:

- **Unit tests**: [tests/unit/](mdc:tests/unit/) - Individual component testing
- **Integration tests**: [tests/integration/](mdc:tests/integration/) - End-to-end testing
- **Fixtures**: [tests/fixtures/](mdc:tests/fixtures/) - Test data and configurations
- **Test utilities**: [tests/conftest.py](mdc:tests/conftest.py) - Shared test configurations

## Test Execution Patterns

### Individual Test Execution

```bash
# Run specific test function
uv run --group dev pytest tests/unit/test_factory.py::test_sqlmesh_definitions_factory -v

# Run tests matching pattern
uv run --group dev pytest -k "factory" -v

# Run tests with specific marker
uv run --group dev pytest -m "unit" -v
uv run --group dev pytest -m "integration" -v
```

### Debug Testing

```bash
# Run tests with debug output
uv run --group dev pytest tests/ -v -s

# Run tests with maximum verbosity
uv run --group dev pytest tests/ -vvv

# Run tests and stop on first failure
uv run --group dev pytest tests/ -x
```

### Coverage Testing

```bash
# Generate coverage report
make coverage

# View coverage in browser
open htmlcov/index.html

# Generate coverage badge (if needed)
uv run --group dev coverage-badge -o coverage-badge.svg
```

## Test Development

### Adding New Tests

1. **Unit tests**: Add to [tests/unit/](mdc:tests/unit/) for individual components
2. **Integration tests**: Add to [tests/integration/](mdc:tests/integration/) for end-to-end scenarios
3. **Fixtures**: Add to [tests/fixtures/](mdc:tests/fixtures/) for shared test data
4. **Configuration**: Update [tests/conftest.py](mdc:tests/conftest.py) for shared test setup

### Test Naming Convention

- **Files**: `test_*.py`
- **Classes**: `Test*`
- **Functions**: `test_*`
- **Markers**: Use appropriate markers (`@pytest.mark.unit`, `@pytest.mark.integration`)

### Test Data Management

- **Test data**: Use [tests/load_jaffle_data.py](mdc:tests/load_jaffle_data.py) for data loading
- **Fixtures**: Use pytest fixtures for reusable test data
- **Cleanup**: Ensure tests clean up after themselves
- **Isolation**: Tests should be independent and not rely on external state

## Troubleshooting

### Common Issues

1. **Import errors**: Ensure `PYTHONPATH=src` or use `uv run --group dev`
2. **Missing dependencies**: Run `uv sync --group dev` to install all dev dependencies
3. **Test failures**: Check test data and SQLMesh project configuration
4. **Coverage issues**: Ensure tests are in the correct directory structure

### Debug Commands

```bash
# Check test discovery
uv run --group dev pytest --collect-only

# Check test configuration
uv run --group dev pytest --version

# Run tests with specific Python path
PYTHONPATH=src uv run --group dev pytest tests/ -v
```

print(f'Event handlers: {len(console._handlers)}')
"
```
