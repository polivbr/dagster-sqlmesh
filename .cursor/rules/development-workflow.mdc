---
description: Development Workflow for dg-sqlmesh
alwaysApply: false
---

# Development Workflow for dg-sqlmesh

## Make Commands

Always use the [Makefile](mdc:Makefile) for development tasks:

```bash
# Basic development
make help                    # Show all available commands
make build                   # Build the package
make clean                   # Clean build artifacts
make test                    # Run tests
make vulture                 # Detect dead code

# Code quality
make ruff                    # Lint code with ruff
make format                  # Format code with ruff
make lint                    # Lint and format code

# Version management
make check-version           # Check current version
make bump-patch             # Bump patch version (1.9.2 -> 1.9.3)
make bump-minor             # Bump minor version (1.9.2 -> 1.10.0)
make bump-major             # Bump major version (1.9.2 -> 2.0.0)

# Publication
make validate               # Full validation (clean + build + test + ruff + vulture)
make publish                # Publish to PyPI (requires UV_PUBLISH_TOKEN)
make quick-publish          # Build and publish in one step

# Documentation
make docs-serve             # Start MkDocs development server
make docs-build             # Build documentation site
make docs                   # Full documentation workflow

# Development workflows
make dev-quick              # Quick development check (lint + test + docs)
make dev-full               # Full development workflow (install + test + lint + vulture + docs)
```

## Current Project Status

- **Version**: 1.9.2 (latest stable)
- **Python**: 3.11+ (3.12 supported)
- **Dagster**: >=1.11.5
- **SQLMesh**: >=0.209.0
- **License**: Apache-2.0

## Package Configuration

The package is configured in [pyproject.toml](mdc:pyproject.toml) with:

- **Main dependencies**: `dagster>=1.11.5`, `sqlmesh[web]>=0.209.0`, `pandas>=2.2.1`
- **Dev dependencies**: `dagster-webserver>=1.11.5`, `pytest>=8.4.1`, `duckdb>=1.3.2`
- **Documentation**: `mkdocs-material>=9.6.18`, `mkdocs-git-revision-date-localized-plugin>=1.4.7`
- **Package metadata** and classifiers for PyPI

## Architecture Decisions

The project follows documented architecture decisions in the [adr/](mdc:adr/) folder:

- **Individual Assets**: Each SQLMesh model becomes a separate Dagster asset
- **Shared Execution**: Single SQLMesh execution per Dagster run via `SQLMeshResultsResource`
- **Event-Driven Status**: Asset status determined from SQLMesh events
- **No Retries**: Forced no retries via tags to prevent infinite loops
- **Tag Convention**: `dagster:property_name:value` for SQLMesh to Dagster mapping

## Code Quality

- **Linting**: Use `make ruff` for code linting
- **Formatting**: Use `make format` for code formatting
- **Dead Code**: Use `make vulture` to detect dead code
- **Testing**: Use `make test` for running tests
- **Documentation**: Use `make docs` for documentation workflow

## Testing Patterns

### Test Structure

Tests are organized in [tests/](mdc:tests/) directory:

- **Unit tests**: [tests/unit/](mdc:tests/unit/) - Individual component testing
- **Integration tests**: [tests/integration/](mdc:tests/integration/) - End-to-end testing
- **Fixtures**: [tests/fixtures/](mdc:tests/fixtures/) - Test data and configurations
- **Test data**: [tests/load_jaffle_data.py](mdc:tests/load_jaffle_data.py) - Data loading utilities

### Running Tests

```bash
# Run all tests
make test

# Run with coverage
make coverage

# Run specific test categories
uv run --group dev pytest tests/unit/ -v
uv run --group dev pytest tests/integration/ -v
```

## Development Environment

### Setup

```bash
# Install dev dependencies
uv sync --group dev

# Install in development mode
make install-dev

# Verify installation
make check
```

### Pre-commit Checks

```bash
# Run all pre-commit checks
make pre-commit

# Individual checks
make lint
make test
make vulture
make security
```

## Documentation

The project now uses **MkDocs with Material theme** for comprehensive documentation:

- **Local development**: `make docs-serve` (http://localhost:8000)
- **Build**: `make docs-build`
- **Deployment**: Automatic via GitHub Actions to [GitHub Pages](https://fosk06.github.io/dagster-sqlmesh/)
- **Source**: [docs/](mdc:docs/) directory

## Release Process

### Patch Release

```bash
make release-patch  # Clean + bump-patch + build + publish
```

### Minor Release

```bash
make release-minor  # Clean + bump-minor + build + publish
```

### Major Release

```bash
make release-major  # Clean + bump-major + build + publish
```

## Security and Quality

- **Security audit**: `make security` (pip-audit + safety + license compliance)
- **Code quality**: `make validate` (full validation pipeline)
- **CI simulation**: `make ci-test` (simulate CI/CD workflow)

# Development Workflow for dg-sqlmesh

## Make Commands

Always use the [Makefile](mdc:Makefile) for development tasks:

```bash
# Basic development
make help                    # Show all available commands
make build                   # Build the package
make clean                   # Clean build artifacts
make test                    # Run tests
make vulture                 # Detect dead code

# Code quality
make ruff                    # Lint code with ruff
make format                  # Format code with ruff
make lint                    # Lint and format code

# Version management
make check-version           # Check current version
make bump-patch             # Bump patch version (1.9.2 -> 1.9.3)
make bump-minor             # Bump minor version (1.9.2 -> 1.10.0)
make bump-major             # Bump major version (1.9.2 -> 2.0.0)

# Publication
make validate               # Full validation (clean + build + test + ruff + vulture)
make publish                # Publish to PyPI (requires UV_PUBLISH_TOKEN)
make quick-publish          # Build and publish in one step

# Documentation
make docs-serve             # Start MkDocs development server
make docs-build             # Build documentation site
make docs                   # Full documentation workflow

# Development workflows
make dev-quick              # Quick development check (lint + test + docs)
make dev-full               # Full development workflow (install + test + lint + vulture + docs)
```

## Current Project Status

- **Version**: 1.9.2 (latest stable)
- **Python**: 3.11+ (3.12 supported)
- **Dagster**: >=1.11.5
- **SQLMesh**: >=0.209.0
- **License**: Apache-2.0

## Package Configuration

The package is configured in [pyproject.toml](mdc:pyproject.toml) with:

- **Main dependencies**: `dagster>=1.11.5`, `sqlmesh[web]>=0.209.0`, `pandas>=2.2.1`
- **Dev dependencies**: `dagster-webserver>=1.11.5`, `pytest>=8.4.1`, `duckdb>=1.3.2`
- **Documentation**: `mkdocs-material>=9.6.18`, `mkdocs-git-revision-date-localized-plugin>=1.4.7`
- **Package metadata** and classifiers for PyPI

## Architecture Decisions

The project follows documented architecture decisions in the [adr/](mdc:adr/) folder:

- **Individual Assets**: Each SQLMesh model becomes a separate Dagster asset
- **Shared Execution**: Single SQLMesh execution per Dagster run via `SQLMeshResultsResource`
- **Event-Driven Status**: Asset status determined from SQLMesh events
- **No Retries**: Forced no retries via tags to prevent infinite loops
- **Tag Convention**: `dagster:property_name:value` for SQLMesh to Dagster mapping

## Code Quality

- **Linting**: Use `make ruff` for code linting
- **Formatting**: Use `make format` for code formatting
- **Dead Code**: Use `make vulture` to detect dead code
- **Testing**: Use `make test` for running tests
- **Documentation**: Use `make docs` for documentation workflow

## Testing Patterns

### Test Structure

Tests are organized in [tests/](mdc:tests/) directory:

- **Unit tests**: [tests/unit/](mdc:tests/unit/) - Individual component testing
- **Integration tests**: [tests/integration/](mdc:tests/integration/) - End-to-end testing
- **Fixtures**: [tests/fixtures/](mdc:tests/fixtures/) - Test data and configurations
- **Test data**: [tests/load_jaffle_data.py](mdc:tests/load_jaffle_data.py) - Data loading utilities

### Running Tests

```bash
# Run all tests
make test

# Run with coverage
make coverage

# Run specific test categories
uv run --group dev pytest tests/unit/ -v
uv run --group dev pytest tests/integration/ -v
```

## Development Environment

### Setup

```bash
# Install dev dependencies
uv sync --group dev

# Install in development mode
make install-dev

# Verify installation
make check
```

### Pre-commit Checks

```bash
# Run all pre-commit checks
make pre-commit

# Individual checks
make lint
make test
make vulture
make security
```

## Documentation

The project now uses **MkDocs with Material theme** for comprehensive documentation:

- **Local development**: `make docs-serve` (http://localhost:8000)
- **Build**: `make docs-build`
- **Deployment**: Automatic via GitHub Actions to [GitHub Pages](https://fosk06.github.io/dagster-sqlmesh/)
- **Source**: [docs/](mdc:docs/) directory

## Release Process

### Patch Release

```bash
make release-patch  # Clean + bump-patch + build + publish
```

### Minor Release

```bash
make release-minor  # Clean + bump-minor + build + publish
```

### Major Release

```bash
make release-major  # Clean + bump-major + build + publish
```

## Security and Quality

- **Security audit**: `make security` (pip-audit + safety + license compliance)
- **Code quality**: `make validate` (full validation pipeline)
- **CI simulation**: `make ci-test` (simulate CI/CD workflow)
