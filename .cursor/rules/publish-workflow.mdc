---
description: Publish Workflow for dg-sqlmesh
alwaysApply: false
---

# Publish Workflow for dg-sqlmesh

This rule explains how to publish new versions of dg-sqlmesh to PyPI.

## 🚀 Quick Publish Commands

### Patch Release (Recommended for Documentation/Infrastructure)

```bash
make release-patch  # Clean + bump-patch + build + publish
```

### Minor Release (New Features)

```bash
make release-minor  # Clean + bump-minor + build + publish
```

### Major Release (Breaking Changes)

```bash
make release-major  # Clean + bump-major + build + publish
```

## 📋 Pre-Publish Checklist

### 1. Check Current Version

```bash
make check-version
```

Verify the version in both `pyproject.toml` and `src/dg_sqlmesh/__init__.py`

### 2. Validate Package

```bash
make validate  # Clean + build + test + ruff + vulture
```

Ensures the package is ready for publication

### 3. Check Publish Configuration

```bash
make check-publish
```

Verifies that `UV_PUBLISH_TOKEN` is set correctly

## 🔧 Manual Publish Commands

### Build Package

```bash
make build
```

Creates both source distribution (`.tar.gz`) and wheel (`.whl`) in `dist/` directory

### Publish to PyPI

```bash
make publish
```

Publishes using `UV_PUBLISH_TOKEN` environment variable

### Alternative: Username/Password

```bash
make publish-auth
```

Publishes using `UV_PUBLISH_USERNAME` and `UV_PUBLISH_PASSWORD`

## 🌐 Environment Configuration

### Required Environment Variables

Set these in your `.env` file or export them:

```bash
# Token-based authentication (recommended)
UV_PUBLISH_TOKEN=your_pypi_token_here

# OR username/password authentication
UV_PUBLISH_USERNAME=your_username
UV_PUBLISH_PASSWORD=your_password
```

### Environment File Setup

Create a `.env` file in the project root:

```bash
# .env
UV_PUBLISH_TOKEN=pypi_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```

## 📦 Package Building

### Clean Build

```bash
make clean  # Remove previous builds
make build  # Create new package
```

### Build Artifacts

The build process creates:

- `dg_sqlmesh-{version}.tar.gz` - Source distribution
- `dg_sqlmesh-{version}-py3-none-any.whl` - Universal wheel

### Build Validation

```bash
# Check build artifacts
ls -la dist/

# Verify package structure
tar -tzf dist/dg_sqlmesh-*.tar.gz | head -20
```

## 🧪 Pre-Publish Testing

### Full Validation Pipeline

```bash
make validate
```

Runs: clean → build → test → ruff → vulture

### CI/CD Simulation

```bash
make ci-test
```

Simulates the GitHub Actions workflow locally

### Pre-commit Checks

```bash
make pre-commit
```

Runs: lint → test → vulture → security

## 🔒 Security and Quality

### Security Audit

```bash
make security
```

Runs: pip-audit + safety + license compliance

### Code Quality

```bash
make lint      # ruff check + format
make vulture   # Dead code detection
make test      # Test suite
```

## 📝 Release Process

### 1. Version Bumping

#### Patch Version (1.9.2 → 1.9.3)

```bash
make bump-patch
```

For bug fixes, documentation updates, and minor improvements

#### Minor Version (1.9.2 → 1.10.0)

```bash
make bump-minor
```

For new features and non-breaking changes

#### Major Version (1.9.2 → 2.0.0)

```bash
make bump-major
```

For breaking changes and major architectural updates

### 2. Build and Test

```bash
make validate  # Full validation
```

### 3. Publish

```bash
make publish  # Publish to PyPI
```

### 4. Verify

```bash
# Check PyPI
pip install --upgrade dg-sqlmesh

# Verify version
python -c "import dg_sqlmesh; print(dg_sqlmesh.__version__)"
```

## 🚨 Troubleshooting

### Common Issues

#### Missing Token

```bash
❌ Error: UV_PUBLISH_TOKEN environment variable not set
```

**Solution**: Set `UV_PUBLISH_TOKEN` in `.env` file or export it

#### Build Failures

```bash
# Clean and retry
make clean
make build
```

#### Test Failures

```bash
# Run tests individually
make test
make ruff
make vulture
```

#### Publish Failures

```bash
# Check PyPI status
# Verify token permissions
# Check package name availability
```

### Debug Commands

```bash
# Check environment
make check-publish

# Verify package structure
make check

# Test build process
make clean build
```

## 📋 Post-Publish Tasks

### 1. Create GitHub Release

```bash
# Tag the release
git tag -a v1.9.3 -m "Release v1.9.3: [description]"
git push origin v1.9.3
```

### 2. Update Documentation

- Update version badges in README.md
- Update version in docs/index.md
- Commit and push changes

### 3. Verify PyPI

- Check package on [PyPI](https://pypi.org/project/dg-sqlmesh/)
- Verify installation: `pip install dg-sqlmesh==1.9.3`

## 🎯 Best Practices

1. **Always validate** before publishing: `make validate`
2. **Use semantic versioning** for version bumps
3. **Test locally** before publishing
4. **Keep `.env` secure** and never commit tokens
5. **Verify publication** on PyPI after release
6. **Create GitHub releases** for all published versions
7. **Update documentation** with new version information

## 🔗 Related Commands

- **Version management**: `make check-version`, `make bump-*`
- **Quality checks**: `make validate`, `make pre-commit`
- **Documentation**: `make docs`, `make docs-build`
- **Testing**: `make test`, `make coverage`

  alwaysApply: false

---
