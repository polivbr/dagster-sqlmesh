name: Release Workflow

on:
  push:
    tags:
      - "v*"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run validation
        run: |
          make validate
          make docs-quality

      - name: Check version consistency
        run: |
          # Get version from tag
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "Tag version: $TAG_VERSION"

          # Get version from pyproject.toml
          PYPROJECT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "pyproject.toml version: $PYPROJECT_VERSION"

          # Get version from __init__.py
          INIT_VERSION=$(grep '__version__ = ' src/dg_sqlmesh/__init__.py | cut -d'"' -f2)
          echo "__init__.py version: $INIT_VERSION"

          # Check if versions match
          if [ "$TAG_VERSION" != "v$PYPROJECT_VERSION" ]; then
            echo "❌ Version mismatch: Tag $TAG_VERSION != pyproject.toml v$PYPROJECT_VERSION"
            exit 1
          fi

          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
            echo "❌ Version mismatch: pyproject.toml $PYPROJECT_VERSION != __init__.py $INIT_VERSION"
            exit 1
          fi

          echo "✅ All versions are consistent: $PYPROJECT_VERSION"

      - name: Build package
        run: make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-dist
          path: dist/

  github-release:
    name: Create GitHub Release
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed

            This release includes various improvements and bug fixes.

            ## Installation

            ```bash
            pip install dg-sqlmesh==${{ steps.get_version.outputs.VERSION }}
            ```

            ## PyPI

            📦 [View on PyPI](https://pypi.org/project/dg-sqlmesh/)

            ## Documentation

            📖 [Full Documentation](https://fosk06.github.io/dagster-sqlmesh/)
          draft: false
          prerelease: false

  pypi-publish:
    name: Publish to PyPI
    needs: [validate, github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: uv sync --group dev

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check if version already exists on PyPI
        id: check_pypi
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          echo "Checking if version $VERSION already exists on PyPI..."

          # Try to get package info from PyPI
          if curl -s "https://pypi.org/pypi/dg-sqlmesh/$VERSION/json" > /dev/null 2>&1; then
            echo "Version $VERSION already exists on PyPI. Skipping publication."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION does not exist on PyPI. Proceeding with publication."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Download build artifacts
        if: steps.check_pypi.outputs.exists != 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: dist/

      - name: Publish to PyPI
        if: steps.check_pypi.outputs.exists != 'true'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: uv publish --token $UV_PUBLISH_TOKEN

      - name: Verify PyPI publication
        if: steps.check_pypi.outputs.exists != 'true'
        run: |
          sleep 30  # Wait for PyPI to update
          pip install --upgrade dg-sqlmesh
          python -c "import dg_sqlmesh; print(f'Installed version: {dg_sqlmesh.__version__}')"

      - name: Skip PyPI publication
        if: steps.check_pypi.outputs.exists == 'true'
        run: |
          echo "✅ Version ${{ steps.get_version.outputs.VERSION }} already exists on PyPI"
          echo "📦 Skipping publication to avoid duplicate version error"
          echo "🔗 PyPI URL: https://pypi.org/project/dg-sqlmesh/${{ steps.get_version.outputs.VERSION }}/"
