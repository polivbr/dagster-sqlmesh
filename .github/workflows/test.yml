name: Test & Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --group dev
          uv pip install coverage[toml]

      - name: Install package in editable mode
        run: |
          echo "üì¶ Installing dg-sqlmesh package in editable mode..."
          uv pip install -e .

      - name: Check version consistency
        run: |
          echo "Checking version consistency..."
          PYPROJECT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          INIT_VERSION=$(grep '__version__ = ' src/dg_sqlmesh/__init__.py | cut -d'"' -f2)
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "__init__.py version: $INIT_VERSION"
          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
            echo "‚ùå Version mismatch between pyproject.toml and __init__.py"
            exit 1
          fi
          echo "‚úÖ Versions are consistent"

      - name: Run linting with ruff
        run: |
          echo "üîç Running ruff linting..."
          uv run ruff check --ignore=F401,F811,E402 src/dg_sqlmesh/ tests/
          echo "üé® Running ruff formatting check..."
          uv run ruff format --check src/dg_sqlmesh/ tests/

      - name: Run vulture (dead code detection)
        run: |
          echo "ü¶Ö Running vulture to detect dead code..."
          uv run vulture src/dg_sqlmesh/ --min-confidence 60 || true

      - name: Load test data
        run: |
          echo "üìä Loading test data..."
          uv run --group dev python tests/load_jaffle_data.py

      - name: Run tests with coverage
        run: |
          echo "üß™ Running tests with coverage..."
          uv run coverage run -m pytest tests/ -v --tb=short
          uv run coverage report --show-missing
          uv run coverage xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' # Only upload once
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Clean previous builds
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf src/*.egg-info/

      - name: Build package
        run: |
          echo "üî® Building package..."
          uv build
          echo "üì¶ Build artifacts:"
          ls -la dist/

      - name: Verify build
        run: |
          echo "üîç Verifying wheel contents..."
          uv run python -m zipfile -l dist/*.whl
          echo "üîç Verifying sdist contents..."
          uv run python -m tarfile -l dist/*.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 30

  security:
    name: Security scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          uv run pip-audit --desc --output=json --format=json || true

      - name: Check for known vulnerabilities
        run: |
          echo "üõ°Ô∏è Checking for known vulnerabilities in dependencies..."
          uv run safety check || true
